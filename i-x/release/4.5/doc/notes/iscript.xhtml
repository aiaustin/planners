<?xml version="1.0" encoding="UTF-8"?>
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
  <title>I-Script</title>
  <link rel="stylesheet" href="note-style.css" />
</head>

<!-- Updated: Sun Dec  2 23:41:53 2007 by Jeff Dalton
-->

<body bgcolor="#ffffff">

<h1>I-Script</h1>

Author: Jeff Dalton
<br />
<!-- I-Script version 4.2, August 31, 2005. -->

<h2>Introduction</h2>

<p>I-Script is a programming language that can be used in I-X
applications.  It can be used to define functions that can be called
in <a href="compute-conditions.html">compute conditions</a> and may
acquire other uses in the future.</p>

<p>A number of different representations of I-Script code are
available:

<ul>

<li>A tree structure that is used internally and will
not be described in this document.</li>

<li>A fairly direct representation of I-Script's abstract syntax as
class definitions.  It will be treated as the abstract syntax in this
document when giving the language's semantics.</li>

<li>Concrete syntaxes derived from the class definitions
by the I-X XML utilities.  At present, this means an
<a href="#xml-syntax">XML syntax</a> and an RDF one.</li>

<li>Other syntaxes that are less directly related to the class
definitions.  There is currently a <a href="#lisp-syntax">Lisp syntax</a>
of this sort.</li>

</ul>
</p>


<h2>Core Abstract Syntax and Semantics</h2>

<h3>Environments and Evaluation</h3>

<p>A <i>binding</i> pairs an <i>identifier</i> with a location
that contains a value.  The identifier is said to be "bound to"
the location.  Sometimes the word "<i>variable</i>" is used to refer
to an indentifier, but it can also used to refer to a binding.</p>

<p>A <i>location</i> can contain different values at different
times.  When the value changes, the new value is said to be "stored
in" or "into" the location.  It is assumed that it is always possible
to obtain new locations that are different from each other and
from any existing ones.</p>

<p>A <i>value</i> can be any object.</p>

<p>An <i>environment</i> is a collection of bindings.  An environment
can be <i>extended</i> by adding a new set of bindings.  This creates
a new environment rather than modifying the existing one.  In the
extended environment, the new bindings take precedence over any
earlier bindings, in the environment, for the same identifiers.</p>

<p>The basic unit in I-Script is an <i>expression</i>.  Expressions
are said to be "evaluated" to produce a value.  Another way to say
that is to say "the value of" some expression or type of expression
"is" and then to describe the value, referring to parts of the expression
as needed.</p>

<p>Evaluation takes place with respect to a <i>lexical enviromnent</i>
and a <i>global environment</i>.  An expression is always evaluated
"in" a lexical environment, and the evaluation process can also
make use of the global environment.</p>

<p>The core semantics for I-Script is given in terms of an abstract
syntax for expressions.  For each kind of expression, there is a
description of how such expressions are evaluated.  Implementations
are not required to work in exactly that way, but they must produde
the same values and have the same side-effects in the same order.</p>

<p>Expressions may contain other expressions, and the evaluation rules
are recursive.  An outermost, or "top-level" expression is evaluated
in an empty lexical environment.  Evaluation rules may specify a
different lexical ennironment for their subexpressions, and that
applies only to those subexpressions.</p>


<h3>True and False</h3>

<p>There are distinguished values <i>true</i> and <i>false</i> that
correspond to <tt>Boolean.TRUE</tt> and <tt>Boolean.FALSE</tt>,
respectively, in Java.  However, most values are considered true.
We will therefore typically use "a true value" and "a false value"
to refer to the two cases.</p>

<h3>Abstract Syntax</h3>

<p>The abstract syntax of an expression type is given as follows:
<pre>
<i>class-name</i>:
   [element | attribute] <i>field-name</i>: <i>value-class-name</i>
   ...
</pre>
The element-attribute difference, and the field names, are relevant
when expressions are written as XML or in a similar concrete form.
They are sometimes ignored when giving the semantics.</p>


<h3>Literals</h3>

<pre><b>literal</b>:
   element <b>value</b>: object
</pre>

The value of a literal is the indicated object.


<h3>Variable References</h3>

<pre><b>var-ref</b>:
   attribute <b>name</b>: name
</pre>

<p>The name is considered an identifier.  If the lexical environment
contains a binding for that name, the value of the <i>var-ref</i> is the
value stored in the location bound to the name in that enviromnent.
Otherwise, the global environment is considered instead.  If neither
environment contains a binding for the name, an exception is
thrown.</p>

<p>The global environment contains a number of predefined names.
<tt>TRUE</tt> is bound to a location containing <i>true</i>, and
<tt>FALSE</tt> is bound to a location containing <i>false</i>.
The values of other predefined names are described in the
section on <a href="#built-in-functions">built-in functions</a>.
</p>


<h3>Functions and Function Calls</h3>

<pre><b>call</b>:
   element <b>function</b>: expression
   element <b>arguments</b>: list of expression
</pre>

<p>The function expression is evaluated to produce a <i>function</i>,
then the argument expressions are evaluated in order.  Finally,
the function is applied to the arguments, and the result of
that application becomes the value of the <i>call</i>.</p>

<p>There are two kinds of functions,
<a href="#built-in-functions">built-in functions</a>
and <i>closures</i>.  A closure is obtained by evaluating
a <a href="#lambda-expression">lambda-expression</a>.
</p>


<h3>Sequential Evaluation</h3>

<pre><b>sequence</b>:
   element <b>of</b>: list of expression
</pre>

The expressions in the sequence are evaluated in order and the value
of the last expressin becomes the values of the <i>sequence</i>.  If
there are no expressions in the sequence, the value is unspecified.


<h3>Conditional Forms</h3>

<pre><b>if</b>:
   element <b>test</b>: expression
   element <b>if-true</b>: expression
   element <b>if-false</b>: expression
</pre>

The test expression is evaluated.  If the result was a true value,
then the if-true expression is evaluated, and its value becomes the
value of the <i>if</i>; otherwise the if-false expression is evaluated,
and its value becomes the value of the <i>if</i>.

<pre><b>and</b>:
   element <b>of</b>: list of expression
</pre>

If there are no expressions, the value of the <i>and</i> is <i>true</i>.
Otherwise, the expressions are evaluated in order.  If one of the
expressions returns a false value, the remaining expressions are
not evaluated, and that false value becomes the value of the
<i>and</i>.  If, instead, all of the expressions return <i>true</i>
values, the value of the last expression becomes the value of the
<i>and</i>.

<pre><b>or</b>:
   element <b>of</b>: list of expression
</pre>

If there are no expressions, the value of the <i>or</i> is <i>false</i>.
Otherwise, the expressions are evaluated in order.  If one of the
expressions returns a true value, the remaining expressions are
not evaluated, and that true value becomes the value of the
<i>or</i>.  If, instead, all of the expressions return <i>false</i>
values, the value of the last expression becomes the value of the
<i>or</i>.


<h3>Assignments and Definitions</h3>

<pre><b>assignment</b>:
   attribute <b>to</b>: name
   element <b>value</b>: expression
</pre>

<p>The name is regarded as an identifier.  The expression
is evaluated to produce a value.  A location is then obtained
as follows:
<ol>

<li>If the name is bound in the lexical environment, use the
location in that binding; otherwise:</li>

<li>If the name is bound in the global enviromnet, use the
location in that binding; otherwise:</li>

<li>Create a new location, bind the name to that location in
the global environment; and use that new location.  (This
is the only time that an environment is modified.)</li>

</ol>
Finally, the value of the expression is stored in the chosen
location and becomes the value of the <i>assignment</i>.
</p>

<h3><a name="lambda-expression">Lambda-Expressions</a></h3>

<pre><b>lambda</b>:
   element <b>parameters</b>: list of name
   element <b>in</b>: expression
</pre>

<p>The value of a <i>lambda</i> is a function that "captures"
the lexical enviromnent as it is when the <i>lambda</i> was
evaluated and, when applied to arguments, extends that environment
with bindings that bind each parameter to the positionally
corresponding argument, resulting in a new environment, <i>e</i>;
the expression in the <i>lambda</i> is then evaluated in <i>e</i>,
and the resulting value becomes the value of the application of
the <i>lambda</i>.
</p>

<p>The function produced by evaluating a <i>lambda</i> is sometimes
called a (lexical) "<i>closure</i>", because it "closes over" a
(lexical) environment.</p>


<h3>Local Variables</h3>

<pre><b>let</b>:
   element <b>bindings</b>: list of binding
   element <b>in</b>: expression

<b>binding</b>:
   attribute <b>name</b>: name
   element <b>value</b>: expression
</pre>

The expressions in the bindings are evaluated in order.
The lexical environment is extended by binding each name
to the value obtained from the corresponding expression
to create a new environment, <i>e</i>.  The expression
in the <i>let</i> is evaluated in <i>e</i> and the resulting
value becomes the value of the <i>let</i>.


<h3>Iteration</h3>

<pre><b>while</b>:
   element <b>test</b>: expression
   element <b>repeat</b>: expression
</pre>

The value of a <i>while</i> is obtained by repeatedly evaluating the
test expression, then the repeat expression, stopping as soon as the
value of the test expression is false.  The value of the <i>while</i>
is then the most receently obtained value of the repeat expression.
If the repeat expression was never evaluated (because the test
returned a false value when it was first evaluated), then the
value of the <i>while</i> is unspecified.


<h2><a name="built-in-functions">Predefined Names</a></h2>

Note that names that are all capitals, such as <tt>TRUE</tt>, are
intended to be constants and should never be assigned new values.
Some interpreters will prevent such assignments, but others may not.

<pre>TRUE -> <i>a true value</i></pre>
<pre>FALSE -> <i>a false value</i></pre>

<pre>(identity <i>object</i>) -> <i>object</i></pre>

Returns the same object.

<pre>(apply <i>function object ... list</i>) -> <i>object</i></pre>

Applies the function to arguments obtained by taking all of
the objects before the last (which must be a list), followed
by the elements of the list, then returns the result of that
application.  <tt>apply</tt> is thus a way to expand a list
into individual arguments to a function, as well as to place
some other individual arguments before the ones from the list.

<pre>(error <i>object</i> ...)</pre>

Throws an exception of class <tt>Interpreter.Error</tt> with
a message formed by concatenating string representations of
the objects.


<h3>Predicates</h3>

<pre>(symbolp <i>object</i>) -> <i>boolean</i></pre>

Returns <i>true</i> if the object is a symbol and <i>false</i> otherwise.

<pre>(numberp <i>object</i>) -> <i>boolean</i></pre>

Returns <i>true</i> if the object is a number and <i>false</i> otherwise.

<pre>(stringp <i>object</i>) -> <i>boolean</i></pre>

Returns <i>true</i> if the object is a string and <i>false</i> otherwise.

<pre>(listp <i>object</i>) -> <i>boolean</i></pre>

Returns <i>true</i> if the object is an llist and <i>false</i> otherwise.

<pre>(consp <i>object</i>) -> <i>boolean</i></pre>

Returns <i>true</i> if the object is a cons (a non-empty llist)
and <i>false</i> otherwise.

<pre>(not <i>object</i>) -> <i>boolean</i></pre>

Returns <i>true</i> if the object is a false value and
<i>false</i> if the object is a true value.

<pre>(eq <i>object</i> <i>object</i>) -> <i>boolean</i></pre>

Returns <i>true</i> if the objects are the very same, identical
object (i.e., if they are not really two separate objects at all),
and <i>false</i> otherwise.

<pre>(equal <i>object</i> <i>object</i>) -> <i>boolean</i></pre>

<p>Returns <i>true</i> if the objects are structurally equal
and false otherwise.</p>

<p><i>(The meaning of "structurally equal" needs to be specified.)</i></p>


<h3>Lists</h3>

<pre>(null <i>object</i>) -> <i>boolean</i></pre>

<pre>(cons <i>object</i> <i>llist</i>) -> <i>llist</i></pre>

<pre>(car <i>llist</i>) -> <i>object</i>)</pre>

<pre>(cdr <i>llist</i>) -> <i>object</i>)</pre>

<pre>(first <i>llist</i>) -> <i>object</i>)</pre>

<pre>(rest <i>llist</i>) -> <i>object</i>)</pre>

<pre>(list <i>object</i> ...) -> <i>llist</i></pre>

<pre>(make-list <i>collection</i>) -> <i>llist</i></pre>

<pre>(mapcar <i>function llist</i>) -> <i>llist</i></pre>


<h3>Sequences</h3>

A <i>sequence</i> is a collection, a string, or an <tt>Object[]</tt>
array.

<pre>(empty <i>sequence</i>) -> <i>boolean</i></pre>

Returns <i>true</i> if th sequence is empty and <i>false</i> otherwise.

<pre>(length <i>sequence</i>) -> <i>long</i></pre>

Returns the number of elements in the sequence.

<pre>(elt <i>sequence</i> <i>long</i>) -> <i>object</i></pre>

Returns the indicted, 0-origin, element of the sequence.


<h3>Collections</h3>

<pre>(make-collection <i>type collection</i>) -> <i>collection</i></pre>

Returns a new collection with contents taken from an existing collection.
The type is a symbol and must be one of <tt>list</tt>, <tt>set</tt>,
or <tt>sorted-set</tt>.

<pre>(contains <i>collection object</i>) -> <i>boolean</i></pre>

<pre>(add <i>collection object</i>) -> <i>boolean</i></pre>

<pre>(remove <i>collection object</i>) -> <i>boolean</i></pre>

<pre>(for-each <i>function colletion</i>) -> <i>colletion</i></pre>

<pre>(map <i>function colletion</i>) -> <i>llist</i></pre>


<h3>Hash Tables</h3>

<pre>(make-hash-map) -> <i>hash-map</i></pre>

<pre>(make-context-hash-map) -> <i>context-layered-hash-map</i></pre>

<pre>(get <i>map key default-value</i>) -> <i>value</i></pre>

<pre>(put <i>map key value</i>) -> <i>value</i></pre>

<pre>(for-each-entry <i>function map</i>) -> <i>map</i></pre>


<h3>Numeric Functions</h3>

<pre>(= <i>number</i> <i>number</i>) -> <i>boolean</i>
(/= <i>number</i> <i>number</i>) -> <i>boolean</i>
(&lt; <i>number</i> <i>number</i>) -> <i>boolean</i>
(&gt; <i>number</i> <i>number</i>) -> <i>boolean</i>
(&lt;= <i>number</i> <i>number</i>) -> <i>boolean</i>
(&gt;= <i>number</i> <i>number</i>) -> <i>boolean</i>
(+ <i>number</i> ...) -> <i>number</i>
(- <i>number</i> <i>number</i>) -> <i>number</i>
(* <i>number</i> ...) -> <i>number</i>
(/ <i>number</i> <i>number</i>) -> <i>number</i>
</pre>

These functions perform the corresponding comparisons or arithmetic
operations.  Numbers must be longs or double precision floating point
numbers (doubles).  The numbers are processed in the order in which
they appear as arguments, and the arithmetic result is a long if all
of the numbers are longs; otherwise, any partial result is converted
to a double when the first double is encountered, any remaining
calculations are performed as double precision floating point, and
a double is returned as the final result.

<pre>
PI -> <i>pi</i>

(sin <i>number</i>) -> <i>double</i>
(cos <i>number</i>) -> <i>double</i>
(tan <i>number</i>) -> <i>double</i>
(asin <i>number</i>) -> <i>double</i>
(acos <i>number</i>) -> <i>double</i>
(atan <i>number</i>) -> <i>double</i>
(atan2 <i>number</i> <i>number</i>) -> <i>double</i>
(to-radians <i>number</i>) -> <i>double</i>
(to-degrees <i>number</i>) -> <i>double</i>

(sqrt <i>number</i>) -> <i>double</i>
</pre>


<h3>I/O</h3>

At present, there is only simple I/O using Java's <tt>System.in</tt>
and <tt>System.out</tt>.

<pre>(print <i>object</i> ...) -> <i>unspecified</i></pre>

Outputs a string representation of each object without any added
whitespace.

<pre>(println <i>object</i> ...) -> <i>unspecified</i></pre>

Outputs a string representation of each object without any added
whitespece except for a newline sequence at the end.

<pre>(read) -> <i>object</i></pre>

Reads characters until it ontains the representation of an object,
then constructs and returns the corresponding object.


<h3>Java Utilities</h3>

<pre>(find-java-class <i>symbol-or-string</i>) -> <i>class or false</i></pre>

Returns the class that has the specified name, or else a false value
if no such class can be found.  The fully qualified class name should
be used.  For example:
<pre>
    (find-java-class "java.util.LinkedList")
</pre>

<pre>(java-call <i>object</i> <i>method-name</i> <i>argument</i> ...) -> <i>value</i></pre>

Does the equivalent of
<pre>
    <i>object</i>.<i>method-name</i>(<i>argument</i>, ...)
</pre>
except that the run-time classes of the <i>object</i> and
<i>arguments</i> are used.  The most specific applicable method
is called, where "most specific" is as defined in the <i>Java
Language Specification,</i> section 15.11.

<p>The <i>object</i> can be any object; it can be a class to call
static methods.   The <i>method-name</i> must be a symbol or string.
The reserved method name <tt>new</tt> can be used with a class
as the <i>object</i> to call a constructor.  If the Java method
returns null, a unique object that represents null is returned
instead.  That object is available as the value of the constant
<tt>JAVA-NULL</tt>.</p>

<p>There's automatic conversion between primitive values (such as
ints) and their corresponding wrapper objects (such as Integers).
However, it's important to remember that I-Script numbers correspond
to Java Longs and Doubles, while some Java methods what something
else, typically an int.  To get an int from a Long, call it's
<tt>intValue</tt> method, like this:
<pre>
    (java-call 12 "intValue")
</pre>
The result will be an int that is automatically converted to
an Integer, which allows it to match int parameters in method
signatures.  Such Integers cannot be treated as numbers in
other ways.  They can't, for example, be added.
</p>

<pre>JAVA-NULL -> <i>the object that represents null</i></pre>


<h2>Syntax: Quick Reference</h2>

<h3><a name="lisp-syntax">Lisp Syntax</a></h3>

<pre>
expression ::= literal | var-ref | call 
            |  if | cond | and | or
            |  assignment | definition
            |  lambda | let | let*
	    |  sequence | while

literal ::= <b>(quote</b> data<b>)</b> | <b>'</b>data

var-ref ::= symbol

call ::= <b>(</b>function argument*<b>)</b>
function ::= expression
argument ::= expression

if ::=  <b>(if</b> test if-true if-false<b>)</b>
test ::= expression
if-true ::= expression
if-false ::= expression

cond ::= <b>(cond</b> cond-clause*<b>)</b>
cond-clause ::= <b>(</b>test if-true*<b>)</b>

and ::= <b>(and</b> expression*<b>)</b>

or ::= <b>(or</b> expression*<b>)</b>

assignment ::= <b>(setq</b> var-ref expression<b>)</b>

definition ::= define | defun

define ::= <b>(define</b> var-ref expression<b>)</b>

defun ::= <b>(defun</b> function-name <b>(</b>variable*<b>)</b> expression*<b>)</b>
function-name ::= var-ref
variable ::= symbol

lambda ::= <b>(lambda (</b>variable*<b>)</b> expression*<b>)</b>

let ::= <b>(let (</b>binding*<b>)</b> expression*<b>)</b>
binding ::= <b>(</b>variable expression<b>)</b>

let* ::= <b>(let* (</b>binding*<b>)</b> expression*<b>)</b>

sequence ::=  <b>(progn</b> expression*<b>)</b>

while ::= <b>(while</b> test expression*<b>)</b>
</pre>

<h3><a name="xml-syntax">XML Syntax</a></h3>

<p>The grammar in this section is generated from the class
definitions by a program that outputs plain text, which is why
it is not as nicely formatted as the Lisp syntax.  Identifiers
that are written completely in upper case are the nonterminal
symbols of the grammar.
"<tt>::=</tt>" connects a nonterminal with its definition.
"<tt>|</tt>" separates alternatives.  "<i>nonterminal</i><tt>...</tt>"
indicates that zero or more instances of the nonterminal may appear.
</p>

<pre><![CDATA[
EXPRESSION ::= AND | ASSIGNMENT | CALL | IF
            |  LAMBDA | LET | LITERAL | OR | SEQUENCE
            |  VAR-REF | WHILE

AND ::=
   <and>
      <of><list>EXPRESSION...</list></of>
   </and>

ASSIGNMENT ::=
   <assignment
         to="NAME">
      <value>EXPRESSION</value>
   </assignment>

BINDING ::=
   <binding
         name="NAME">
      <value>EXPRESSION</value>
   </binding>

CALL ::=
   <call>
      <function>EXPRESSION</function>
      <arguments><list>EXPRESSION...</list></arguments>
   </call>

I-SCRIPT-XML-SOURCE ::=
   <i-script-XML-source>
      <expression>EXPRESSION</expression>
   </i-script-XML-source>

IF ::=
   <if>
      <test>EXPRESSION</test>
      <if-true>EXPRESSION</if-true>
      <if-false>EXPRESSION</if-false>
   </if>

LAMBDA ::=
   <lambda>
      <parameters><list>NAME...</list></parameters>
      <in>EXPRESSION</in>
   </lambda>

LET ::=
   <let>
      <bindings><list>BINDING...</list></bindings>
      <in>EXPRESSION</in>
   </let>

LITERAL ::=
   <literal>
      <value>OBJECT</value>
   </literal>

OR ::=
   <or>
      <of><list>EXPRESSION...</list></of>
   </or>

SEQUENCE ::=
   <sequence>
      <of><list>EXPRESSION...</list></of>
   </sequence>

VAR-REF ::=
   <var-ref
         name="NAME">
   </var-ref>

WHILE ::=
   <while>
      <test>EXPRESSION</test>
      <repeat>EXPRESSION</repeat>
   </while>
]]></pre>

<hr/>
<small><address>Jeff Dalton &lt;J.Dalton@ed.ac.uk&gt;</address></small>
</body>
</html>
