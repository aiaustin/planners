<?xml version="1.0" encoding="UTF-8"?>
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<title>An XML Schema for I-X Plans</title>
</head>

<body bgcolor="#ffffff">

<p>
[<a href="index.html">Top</a>]
</p>

<h1>An XML Schema for I-X Plans</h1>

<p><a href="plan.xsd">The schema</a> was derived from the Java class
definitions for Plan and related classes, plus a small amount of
additional information.  A <a href="bnf.html">BNF-style syntax</a>
and a <a href="relax-ng-schema.html">Relax NG schema</a> were produced
in a similar way and for many purposes may be easier to read.</p>

<p>The schema gives a syntax for everything that would
normally appear in a plan.  However, it is not possible to give an
absolutely complete syntax, because new representable classes might
be defined by particular applications or tools, even at run-time.
Instances of such classes will be represented in the usual way,
as described on the <a href="index.html">introductory page</a>,
but will not be covered by the current schema for plans.  The
schema will be extended to include any new clases that enter
common use.</p>

<p>Moreover, some things cannot be decscribed by an XML schema.
While the schema does give the general syntax for a constraint,
it cannot describe the way the contents of the <tt>parameters</tt>
field vary depending on the values of the <tt>type</tt> and
<tt>relation</tt> fields.  For that, see the rules for
<tt>KNOWN-CONSTRAINT</tt> in the <a href="bnf.html">BNF syntax</a>.
</p>

<h2>Representing the Class-Subclass Relation</h2>

<p>Since fields may be written in any order, <tt>xsd:all</tt> elements
are used when defining the XML schema type that describes the contents
of an object that has fields written as elements.  However,
there are restrictions on <tt>xsd:all</tt> that stop is from using
subtypes for subclasses.</p>

<p>The schema therefore takes a different and unusual approach.
Java's single-inheritance class-subclass relation is handled by
substitution groups in the schema.  Each class has a substitution
group that is in the substitution group of its superclass, and
each non-abstract class has a type that lists its complete contents
(rather than extending a supertype).</p>

<p>To avoid confusion with the lower-case, class-name element tags
used when representing objects in XML, the substitution groups use
upper-case names for abstract elements, and there is an upper-case,
abstract element for each class, as well as a (concrete), lower-case
one.  For example, for the class Issue, which we regard as a subclass
of Object, the schema defines:
<pre><![CDATA[ <xsd:element name="OBJECT" abstract="true" />

 <xsd:element name="ISSUE" abstract="true" substitutionGroup="OBJECT" />

 <xsd:element name="issue" type="issue" substitutionGroup="ISSUE" />
]]></pre>
</p>

<p>The upper-case elements are abstract and so never appear in
documents.  Instead, they allow the schema to say that an instance
of a class or of one of its subclasses may appear.  Thus,
<tt>OBJECT</tt> allows <tt>ISSUE</tt>, and <tt>ISSUE</tt> in turn
allows <tt>issue</tt>.  If there were a subclass of Issue,
ExampleIssue, that could appear in plans, it would get the
element defintions
<pre><![CDATA[ <xsd:element name="EXAMPLE-ISSUE" abstract="true"
              substitutionGroup="ISSUE" />

 <xsd:element name="example-issue" type="example-issue"
              substitutionGroup="EXAMPLE-ISSUE" />
]]></pre>
</p>

<p>The concrete, lower-case elements are always "off to the side", and
the main tree structure is given by the abstract, upper-case elements.
So if C is a subclass of B, and B is a subclass of A, the screme does
not embody those relationships in a type tree like this:
<pre>
   a
   |
   b
   |
   c
</pre>
Instead, it uses an element tree:
<pre>
     A
    / \
   B   a
  / \
 C   b
  \
   c
</pre>
</p>


<h2>What the Schema Defines for a Class</h2>

<p>For a class <i>C</i> named "<tt>class</tt>", the schema defines:
<ul>
<li>(Implicitly), an upper-case substitution group, <tt>CLASS</tt>.</li>
<li>An abstract upper-case element, <tt>CLASS</tt>,
    in the substitution group of <i>C</i>'s superclass.</li>
<li>A concrete lower-case element, <tt>class</tt>, of type
    <tt>class</tt> and in subsitiution group <tt>CLASS</tt>.</li>
<li>A type, <tt>CLASS-as-element</tt>, that is a sequence containing one
    (upper-case) <tt>CLASS</tt> element.</li>
<li>A lower-case type, <tt>class</tt>, that describes the constants
    of instances of <i>C</i>.</li> 
</ul>
For abstract classes, the lower-case element and type are omitted.
</p>

<p>In addition, if lists of <i>C</i> occur in plans, the schema defines:
<ul>
<li>A type, <tt>list-of-CLASS-as-element</tt>, that is a sequence
    contraining one "<tt>list</tt>" element of type
    <tt>list-of-CLASS</tt>.</li>
<li>A type, <tt>list-of-CLASS</tt>, that is a sequence of zero or more
    <tt>CLASS</tt> elements.</li>
</ul>
Note that this implicitly takes care of list of instances of
subclasses of <i>C</i>.
</p>

<p>The type <tt>CLASS-as-element</tt> is used when an instance of
<i>C</i>, or of one of <i>C</i>'s subclasses, must be written as an
element with the instance's (lower-case) class name as the tag.
<tt>list-of-CLASS</tt> works in a similar way.
</p>

<p>The <tt>-as-element</tt> definitions are simply convenient
abbreviations for something that would otherwise have to be written
out in full each time.</p>

<p>As a result of this definition structure, the concrete "content"
types correspond closely to the semi-formal notation used earlier.
For example,
<pre>plan:
   element plan-variable-declarations: list of plan-variable-declaration
   element plan-issues: list of plan-issue
   element plan-issue-refinements: list of plan-issue-refinement
   element plan-nodes: list of plan-node
   element plan-refinements: list of plan-refinement
   element constraints: list of constrainer
   element world-state: list of pattern-assignment
   element annotations: map
</pre>
becomes
<pre><![CDATA[ <!--plan-->

 <xsd:element name="PLAN" abstract="true" substitutionGroup="OBJECT" />

 <xsd:element name="plan" type="plan" substitutionGroup="PLAN" />

 <xsd:complexType name="PLAN-as-element">
  <xsd:sequence>
   <xsd:element ref="PLAN" />
  </xsd:sequence>
 </xsd:complexType>

 <xsd:complexType name="plan">
  <xsd:all>
   <xsd:element name="plan-variable-declarations"
                type="list-of-PLAN-VARIABLE-DECLARATION-as-element"
                minOccurs="0" />
   <xsd:element name="plan-issues" type="list-of-PLAN-ISSUE-as-element" minOccurs="0" />
   <xsd:element name="plan-issue-refinements"
                type="list-of-PLAN-ISSUE-REFINEMENT-as-element"
                minOccurs="0" />
   <xsd:element name="plan-nodes" type="list-of-PLAN-NODE-as-element" minOccurs="0" />
   <xsd:element name="plan-refinements" type="list-of-PLAN-REFINEMENT-as-element" minOccurs="0" />
   <xsd:element name="constraints" type="list-of-CONSTRAINER-as-element" minOccurs="0" />
   <xsd:element name="world-state" type="list-of-PATTERN-ASSIGNMENT-as-element" minOccurs="0" />
   <xsd:element name="annotations" type="MAP-as-element" minOccurs="0" />
  </xsd:all>
 </xsd:complexType>
]]></pre>
</p>


<hr/>
<small><address>Jeff Dalton &lt;J.Dalton@ed.ac.uk&gt;</address></small>
</body>
</html>
